#+TITLE: Standard Install
#+DATE: <2016-03-24 Tue>
#+AUTHOR: Richard Longland
#+EMAIL: longland@X1Carbon
#+OPTIONS: ':nil *:t -:t ::t <:t H:2 \n:nil ^:t arch:headline
#+OPTIONS: author:nil c:nil creator:comment d:nil date:t e:t email:nil
#+OPTIONS: f:t inline:t num:t p:nil pri:nil stat:t tags:not-in-toc
#+OPTIONS: tasks:t tex:t timestamp:t toc:nil todo:t |:t
#+CREATOR: Emacs 24.3.1 (Org mode 8.2.4)
#+DESCRIPTION:
#+EXCLUDE_TAGS: noexport
#+KEYWORDS:
#+LANGUAGE: en
#+SELECT_TAGS: export
#+LATEX_HEADER: \usepackage{fullpage}
#+LATEX_HEADER: \usepackage{times}

* Introduction Notes
  The following instructions are based on a KDE Neon (based on Ubuntu
  LTS 18.04) install performed on Aug. 1, 2019. It should be about the
  same as Ubuntu so these instructions should work.

* Preparation
  - Write the install image to a USB stick
    #+BEGIN_SRC sh
    sudo dd bs=4M if=neon-user-2019-0719-1117.iso of=/dev/sdX
    #+END_SRC
    Where 'sdX' is the location of the usb drive (google it)
  - Install the image onto the hard drive. I like to keep data separate, so operating systems can be clean-updated without losing the data. Here's what this machine looks like:
    | label | Mount point | size     | file system | Notes                      |
    |-------+-------------+----------+-------------+----------------------------|
    | sda1  | NA          | 650 MiB  | NA          | EFI Boot                   |
    | sda2  | /           | 182.3 GB | ext4        | All operating system files |
    | sda3  | /data       | 1.6 TB   | ext4        | Storage                    |
    | sda4  | swap        | 16 GB    | swap        | Same as available RAM      |
  - Select correct timezone, make first user (here I'll make the user 'daq')
* First boot
** Install a few things to make life easier
   - google-chrome
   - git
     #+BEGIN_SRC sh
     sudo apt install git
     #+END_SRC
   - Make the data partition owned appropriately
     #+BEGIN_SRC sh
     cd /
     sudo chown -R daq:daq data
     cd
     #+END_SRC
   - Make Downloads folder in the storage area and link everything
     #+BEGIN_SRC sh
     cd
     ln -s /data data
     mkdir data/Downloads
     ln -s data/Downloads .
     #+END_SRC
** Setup the desktop to make life easier still
   1. Install any updates
   2. Drag the terminal icon from the menu to the right of the "start button"
   3. Same with google chrome
   4. Load the "Folder view" widget to the toolbar
      + Click on the settings button on the right of the toolbar
      + Click "Add widgets"
      + Find "Folder View"
      + Move the widget over close to the "start button"
   5. Add extra desktops
      + Start -> Applications -> Settings -> System Settings
      + Desktop Behaviour -> Virtual Desktops
      + Make 4 desktops (this should make a desktop switching widget on the toolbar)
      + Move the switcher over to the right-hand side
      + Setup shortcuts so "Ctrl-Alt-Left" and "Ctrl-Alt-Right" switch the desktops (these settings are also in the System Settings)
   6. While you're in the shortcuts, change the Run Command to launch on "Meta+Space" (Windows+Space)
   7. Window Management
      + Still in System Settings, change the window behavior to "Focus Follows Mouse" and the Delay to 150 ms.
      + Under Window Actions change the modifier key to "Meta"
   8. Keyboard setup
      + Still in system settings, go to Input Devices -> Keyboard
      + Make sure numlock is always on by default
      + Under "Advanced" click the "Key Sequence to kill the X server" (now "Ctrl-Alt-Backspace" will kill the X server in case of crashes)
   9. Screensaver
      + Still in System Settings under Power Management. Lengthen Screen Energy Saving to 60 minutes.
   10. Session settings
       + While still in Sytem Settings under Startup and Shutdown. Click on Desktop Session and make sure "Start with an empty session" is selected.
** Clone the git repository
   1) Make a directory to work from:
      #+BEGIN_SRC sh
      cd
      mkdir tmp
      cd tmp
      #+END_SRC
   2) Clone the git repo
      #+BEGIN_SRC sh
      git clone https://github.com/TUNL-Enge/Doc-StandardInstall.git
      cd StandardInstall
      #+END_SRC
** Start copying files
*** skel
    This helps set up defaults when new users are added
    #+BEGIN_SRC sh
    cd files/
    rsync -av skel/ ~/
    sudo rsync -av skel/ /etc/skel/
    cd ../
    #+END_SRC
    Don't worry about the "Device busy" errors.
*** motd
    This provides a banner upon logging in
    #+BEGIN_SRC sh
    cd motd
    sudo cp motd /etc/
    cd ../
    #+END_SRC
*** images
    For background images
    #+BEGIN_SRC sh
    rsync -av images ~/
    #+END_SRC
    - Set the background of the desktop
      + Right click desktop background, then "Configure Desktop"
      + Layout = Desktop
      + Wallpaper Type = Image
      + Positioning = Scaled, Keep Proportions
      + Background = Solid color (black)
      + Click "Add image" and select FENRISLogo-notext.png
*** Packages
    Install a bunch of packages
    - Basic
      #+BEGIN_SRC sh
      sudo apt install openssh-server libssl-dev screen build-essential emacs net-tools
      #+END_SRC
    - Other important tools
      #+BEGIN_SRC sh
      sudo apt install ess subversion libblas-dev liblapack-dev git gfortran libopenmpi-dev \
              openmpi-bin cmake magit xorg-dev org-mode emacs-goodies-el
      #+END_SRC
*** R Packages
    Install a bunch of packages for R
    #+BEGIN_SRC sh
    sudo apt install r-base-core r-cran-cluster r-cran-coda r-cran-hmisc \
            r-cran-lattice r-cran-mass r-cran-mcmcpack r-cran-plotrix \
            r-cran-rcolorbrewer r-cran-rcpp r-cran-survival \
            r-cran-teachingdemos 
    #+END_SRC
*** LaTeX
    A bunch of useful LaTeX stuff
    #+BEGIN_SRC sh
    sudo apt install texlive texlive-base auctex preview-latex-style \
            texlive-fonts-recommended texlive-generic-recommended \
            texlive-generic-extra texlive-latex-recommended-doc \
            texlive-science libpgf-dev \
            texlive-pictures texlive-pstricks texlive-publishers \
            xfig
    #+END_SRC
** Networking
   + Setup the hosts file. ~sudo nano /etc/hosts~
     #+BEGIN_SRC sh
     127.0.0.1       localhost
     127.0.1.1       engedaq
     10.0.0.5        engesbc

     #The following lines are desirable for IPv6 capable hosts
     ::1     ip6-localhost ip6-loopback
     fe00::0 ip6-localnet
     ff00::0 ip6-mcastprefix
     ff02::1 ip6-allnodes
     ff02::2 ip6-allrouters
     #+END_SRC
   + Setup the network connection with the single-board computer. ~sudo nano /etc/network/interfaces~
     #+BEGIN_SRC 
     # interfaces(5) file used by ifup(8) and ifdown(8)
     auto lo
     iface lo inet loopback

     # Shared connection with SBC
     auto eth0
     iface eth0 inet static
     address 10.0.0.1/24
     #+END_SRC
     In this case, eth0 may need to be replaced by the appropriate interface. Use ifconfig to see which one!
** Setup new users
   1. Make new users (here I'll make the DAQ user: "longland")
      - Still in system settings
      - Account Details -> User Manager -> New User
      - Make sure user has admin privileges if desired
   2. Reboot!
   3. Log in as new user
   4. Repeat steps 2-9 above
   5. Remove the useless folders
      + Documents, Downloads, Music, Pictures, Templates, Videos
** Install other things by hand
   - root6
     See my instructions here: [[http://engesrv.physics.ncsu.edu/Docs/InstallRoot]]
   - NSCLDAQ
     See my instructions here: [[http://engesrv.physics.ncsu.edu/Docs/NSCLDAQ]]
   - EPICS client
     See my instructions here: [[http://engesrv.physics.ncsu.edu/Docs/EPICSClient]]
   - MIDAS
     See my instructions here:  [[http://engesrv.physics.ncsu.edu/Docs/MIDAS]]
** Install EngeSpec
   + Prerequisites
     #+BEGIN_SRC sh
     sudo apt install libboost-python-dev libboost-numpy-dev
     #+END_SRC
   + You also need to download some packages through Python
     #+BEGIN_SRC sh
     sudo apt install pip
     sudo pip install pyside2 matplotlib scipy lmfit pyQT5 pandas
     #+END_SRC
   + Download the code
     #+BEGIN_SRC sh
     cd
     git clone git@github.com:TUNL-Enge/DAQ-EngeSpec.git EngeSpec
     cd EngeSpec/lib
     cmake .
     make
     #+END_SRC
   + If you get a ~KeyError: 'back'~ error, it's a matplotlib bug.
     + Edit ~matplotlib/backends/backend_qt5.py~ as root
     + Change the relevent lines to match this patch: https://github.com/matplotlib/matplotlib/pull/14319/commits/a99a4c773fdcdf1f3de37ac2ca84851af5774cf9
   + Test!
     + Start EngeSpec
       #+BEGIN_SRC sh
       cd ~/EngeSpec
       ./EngeSpec.py
       #+END_SRC
     + Start the DAQ frontend. In a different terminal:
       #+BEGIN_SRC sh
       cd ~/midas/online/src/v785
       ./start_demo.sh
       #+END_SRC
     + In EngeSpec
       + File -> Connect MIDAS
       + Start run
       + Refresh
       + Try making a gate
     + If you are having trouble with Offline MIDAS, try the following
       #+BEGIN_SRC sh
       ln -s lib/linEngeSort.so EngeSort.so
       #+END_SRC
       
